# -*- coding: utf-8 -*-
import warnings

"""
Django settings for refugeedata project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from django.core.urlresolvers import reverse_lazy
from django.utils.translation import ugettext_lazy as _

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if "MAILGUN_API_KEY" in os.environ:
    EMAIL_BACKEND = 'django_mailgun.MailgunBackend'
    MAILGUN_ACCESS_KEY = os.getenv("MAILGUN_API_KEY")
    MAILGUN_SERVER_NAME = os.getenv("MAILGUN_DOMAIN")

if "EMAIL_FROM_ADDRESS" in os.environ:
    DEFAULT_FROM_EMAIL = os.environ["EMAIL_FROM_ADDRESS"]

if "TWILIO_SID" in os.environ:
    TWILIO_SID = os.environ.get("TWILIO_SID")
    TWILIO_AUTHTOKEN = os.environ.get("TWILIO_AUTHTOKEN")
    TWILIO_FROMSMS = os.environ.get("TWILIO_FROMSMS")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = os.environ["SECRET_KEY"]
except KeyError:
    warnings.warn("SECRET_KEY environment variable not set")

DEBUG = os.environ.get("DEBUG") == "1"
SSLIFY_DISABLE = os.environ.get("SSLIFY_DISABLE", DEBUG and "1") == "1"

#ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django_gulp',
    'django.contrib.contenttypes',
    'grappelli.dashboard',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'memoize',
    'django_rq',
    'compressor',
    'raven.contrib.django.raven_compat',
    'foundationform',
    'refugeedata',
)

DEFAULT_DOMAIN = os.environ.get("DEFAULT_DOMAIN", None)
if DEFAULT_DOMAIN:
    INSTALLED_APPS += ('django.contrib.sites',)
    SITE_ID = 1
    SECURE_SSL_HOST = DEFAULT_DOMAIN
    SECURE_SSL_REDIRECT = True

MIDDLEWARE_CLASSES = (
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
    'refugeedata.middleware.EnforceSiteURLMiddleware',
    'sslify.middleware.SSLifyMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'refugeedata.distribution.middleware.DistributionUserMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'refugeedata.middleware.MaxAgeMiddleware',
)

ROOT_URLCONF = 'refugeedata.app.urls'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.media',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'refugeedata.app.context_processors.languages',
            ],
        },
    },
]

LOCALE_PATHS = ("locale", )

WSGI_APPLICATION = 'refugeedata.app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    #'default': {
    #    'ENGINE': 'django.db.backends.sqlite3',
    #    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #}
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TODO allow this to be specified elsewhere
LANGUAGES = (
    ("tr", "Turk√ße"),
    ("en", "English"),
)

TIME_ZONE = os.environ.get("TIME_ZONE", "UTC")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# Heroku settings
# Parse database configuration from $DATABASE_URL
import dj_database_url
DATABASES['default'] = dj_database_url.config()

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
#SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Extra security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 3600  # 1 hour - TODO increase this
SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Allow all host headers
ALLOWED_HOSTS = ['*']

# Static asset configuration
import os
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = "uploads"
MEDIA_URL = "/media/"

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

COMPRESS_OFFLINE = True
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

ID_LENGTH = os.environ.get("ID_LENGTH", 4)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

RAVEN_CONFIG = {
    'dsn': os.environ.get("RAVEN_DSN"),
}

LOGIN_URL = reverse_lazy("auth:login")
LOGOUT_URL = reverse_lazy("auth:logout")
LOGIN_REDIRECT_URL = reverse_lazy("public")

GRAPPELLI_ADMIN_TITLE = _("Admin Interface")
GRAPPELLI_INDEX_DASHBOARD = 'refugeedata.dashboard.CustomIndexDashboard'

RQ_QUEUES = {
    'default': {
        'URL': os.getenv('REDIS_URL', 'redis://localhost:6379/0'),
        'DEFAULT_TIMEOUT': 500,
    },
}

# File storage
if not DEBUG:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_HEADERS = {
        'ExpiresDefault': 'access plus 6 months',
        'Cache-Control': 'max-age=86400',
    }
